version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: polkablocks-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: polkadot_wallets
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/main.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - polkablocks

  # Frontier Node (Polkadot-EVM)
  frontier-node:
    image: parity/substrate:latest
    container_name: polkablocks-frontier
    command: |
      --dev
      --unsafe-rpc-external
      --rpc-cors=all
      --rpc-methods=unsafe
      --rpc-port=9944
      --ws-port=9945
      --prometheus-external
      --prometheus-port=9615
      --port=30333
      --base-path=/data
      --log=info,runtime=debug
    volumes:
      - frontier_data:/data
    ports:
      - "9944:9944"  # RPC port
      - "9945:9945"  # WebSocket port
      - "9615:9615"  # Prometheus port
      - "30333:30333" # P2P port
    networks:
      - polkablocks

  # Alternative: Use Moonbeam Development Node (Polkadot-EVM compatible)
  moonbeam-dev:
    image: moonbeamfoundation/moonbeam:latest
    container_name: polkablocks-moonbeam
    command: |
      --dev
      --rpc-external
      --rpc-cors=all
      --rpc-port=8545
      --ws-port=8546
      --prometheus-external
      --prometheus-port=9616
      --port=30334
      --base-path=/data
      --log=info
    volumes:
      - moonbeam_data:/data
    ports:
      - "8545:8545"  # EVM RPC port
      - "8546:8546"  # EVM WebSocket port
      - "9616:9616"  # Prometheus port
      - "30334:30334" # P2P port
    networks:
      - polkablocks
    profiles:
      - moonbeam

  # Contract Deployment Service
  contract-deployer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: polkablocks-deployer
    depends_on:
      postgres:
        condition: service_healthy
      moonbeam-dev:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/polkadot_wallets
      RPC_URL: http://moonbeam-dev:8545
      WS_URL: ws://moonbeam-dev:8546
      PRIVATE_KEY: ${DEPLOYER_PRIVATE_KEY:-0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80}
    volumes:
      - ./contracts:/app/contracts
      - ./scripts:/app/scripts
    command: |
      sh -c "
        echo 'Waiting for blockchain to be ready...'
        sleep 10
        echo 'Deploying contracts...'
        cd /app/contracts && forge script script/Deploy.s.sol:DeploySubscription --rpc-url http://moonbeam-dev:8545 --broadcast --private-key $${PRIVATE_KEY}
      "
    networks:
      - polkablocks
    profiles:
      - deploy

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: polkablocks-backend
    working_dir: /app/backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/polkadot_wallets
      PORT: 3001
      RPC_URL: http://moonbeam-dev:8545
      WS_URL: ws://moonbeam-dev:8546
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app/backend
      - backend_node_modules:/app/backend/node_modules
    command: npm start
    networks:
      - polkablocks

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: polkablocks-frontend
    working_dir: /app/frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_RPC_URL: http://localhost:8545
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend
      - frontend_node_modules:/app/frontend/node_modules
    command: npm run dev
    networks:
      - polkablocks

volumes:
  postgres_data:
  frontier_data:
  moonbeam_data:
  backend_node_modules:
  frontend_node_modules:

networks:
  polkablocks:
    driver: bridge